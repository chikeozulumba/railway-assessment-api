# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

type ProfileCountAggregate {
  id: Int!
  userId: Int!
  railwayId: Int!
  email: Int!
  name: Int!
  username: Int!
  avatar: Int!
  currentCost: Int!
  estimatedCost: Int!
  registrationStatus: Int!
  status: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ProfileMinAggregate {
  id: String
  userId: String
  railwayId: String
  email: String
  name: String
  username: String
  avatar: String
  currentCost: String
  estimatedCost: String
  registrationStatus: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ProfileMaxAggregate {
  id: String
  userId: String
  railwayId: String
  email: String
  name: String
  username: String
  avatar: String
  currentCost: String
  estimatedCost: String
  registrationStatus: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ProfileCount {
  projects: Int!
}

type UserRepository {
  id: ID!
  userId: String!
  repoId: Int!
  tokenId: String!
  name: String
  fullName: String
  defaultBranch: String
  installationId: String
  isPrivate: Boolean
  branchesLoaded: Boolean
  branches: JSON
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  token: Token!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type TokenCount {
  repositories: Int!
  projects: Int!
}

type Token {
  id: ID!
  userId: String!
  name: String
  value: String!
  isDefault: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  repositories: [UserRepository!]
  projects: [Project!]
  _count: TokenCount!
}

type ServiceInstance {
  id: ID!
  userId: String!
  serviceId: String!
  railwayServiceInstanceId: String!
  builder: String
  buildCommand: String
  sourceImage: String
  sourceRepo: String
  sourceTemplateName: String
  sourceTemplateSource: String
  startCommand: String
  numReplicas: String
  domains: JSON
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  service: Service!
}

type ServiceCount {
  instances: Int!
}

type Service {
  id: ID!
  userId: String!
  projectId: String!
  railwayServiceId: String!
  name: String
  serviceCreatedAt: DateTime
  serviceUpdatedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  project: Project!
  instances: [ServiceInstance!]
  _count: ServiceCount!
}

type ProjectCount {
  services: Int!
}

type Project {
  id: ID!
  userId: String!
  tokenId: String
  railwayProjectId: String!
  name: String
  description: String
  projectCreatedAt: DateTime
  projectUpdatedAt: DateTime
  prDeploys: Boolean
  prForks: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  token: Token
  user: User!
  services: [Service!]
  _count: ProjectCount!
}

type UserCount {
  projects: Int!
  tokens: Int!
  services: Int!
  serviceInstances: Int!
  repositories: Int!
}

type User {
  id: ID!
  uid: String!
  fullName: String
  email: String
  activeRailwayToken: String
  railwayId: String
  railwayregistrationStatus: String
  railwayAccountStatus: String
  createdAt: DateTime!
  updatedAt: DateTime!
  projects: [Project!]
  tokens: [Token!]
  services: [Service!]
  serviceInstances: [ServiceInstance!]
  repositories: [UserRepository!]
  _count: UserCount!
}

type ProjectCountAggregate {
  id: Int!
  userId: Int!
  tokenId: Int!
  railwayProjectId: Int!
  name: Int!
  description: Int!
  projectCreatedAt: Int!
  projectUpdatedAt: Int!
  prDeploys: Int!
  prForks: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ProjectMinAggregate {
  id: String
  userId: String
  tokenId: String
  railwayProjectId: String
  name: String
  description: String
  projectCreatedAt: DateTime
  projectUpdatedAt: DateTime
  prDeploys: Boolean
  prForks: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type ProjectMaxAggregate {
  id: String
  userId: String
  tokenId: String
  railwayProjectId: String
  name: String
  description: String
  projectCreatedAt: DateTime
  projectUpdatedAt: DateTime
  prDeploys: Boolean
  prForks: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type ServiceCountAggregate {
  id: Int!
  userId: Int!
  projectId: Int!
  railwayServiceId: Int!
  name: Int!
  serviceCreatedAt: Int!
  serviceUpdatedAt: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ServiceMinAggregate {
  id: String
  userId: String
  projectId: String
  railwayServiceId: String
  name: String
  serviceCreatedAt: DateTime
  serviceUpdatedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type ServiceMaxAggregate {
  id: String
  userId: String
  projectId: String
  railwayServiceId: String
  name: String
  serviceCreatedAt: DateTime
  serviceUpdatedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type ServiceInstanceCountAggregate {
  id: Int!
  userId: Int!
  serviceId: Int!
  railwayServiceInstanceId: Int!
  builder: Int!
  buildCommand: Int!
  sourceImage: Int!
  sourceRepo: Int!
  sourceTemplateName: Int!
  sourceTemplateSource: Int!
  startCommand: Int!
  numReplicas: Int!
  domains: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ServiceInstanceMinAggregate {
  id: String
  userId: String
  serviceId: String
  railwayServiceInstanceId: String
  builder: String
  buildCommand: String
  sourceImage: String
  sourceRepo: String
  sourceTemplateName: String
  sourceTemplateSource: String
  startCommand: String
  numReplicas: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ServiceInstanceMaxAggregate {
  id: String
  userId: String
  serviceId: String
  railwayServiceInstanceId: String
  builder: String
  buildCommand: String
  sourceImage: String
  sourceRepo: String
  sourceTemplateName: String
  sourceTemplateSource: String
  startCommand: String
  numReplicas: String
  createdAt: DateTime
  updatedAt: DateTime
}

type TokenCountAggregate {
  id: Int!
  userId: Int!
  name: Int!
  value: Int!
  isDefault: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type TokenMinAggregate {
  id: String
  userId: String
  name: String
  value: String
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type TokenMaxAggregate {
  id: String
  userId: String
  name: String
  value: String
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type UserCountAggregate {
  id: Int!
  uid: Int!
  fullName: Int!
  email: Int!
  activeRailwayToken: Int!
  railwayId: Int!
  railwayregistrationStatus: Int!
  railwayAccountStatus: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type UserMinAggregate {
  id: String
  uid: String
  fullName: String
  email: String
  activeRailwayToken: String
  railwayId: String
  railwayregistrationStatus: String
  railwayAccountStatus: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UserMaxAggregate {
  id: String
  uid: String
  fullName: String
  email: String
  activeRailwayToken: String
  railwayId: String
  railwayregistrationStatus: String
  railwayAccountStatus: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UserRepositoryCountAggregate {
  id: Int!
  userId: Int!
  repoId: Int!
  tokenId: Int!
  name: Int!
  fullName: Int!
  defaultBranch: Int!
  installationId: Int!
  isPrivate: Int!
  branchesLoaded: Int!
  branches: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type UserRepositoryAvgAggregate {
  repoId: Float
}

type UserRepositorySumAggregate {
  repoId: Int
}

type UserRepositoryMinAggregate {
  id: String
  userId: String
  repoId: Int
  tokenId: String
  name: String
  fullName: String
  defaultBranch: String
  installationId: String
  isPrivate: Boolean
  branchesLoaded: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type UserRepositoryMaxAggregate {
  id: String
  userId: String
  repoId: Int
  tokenId: String
  name: String
  fullName: String
  defaultBranch: String
  installationId: String
  isPrivate: Boolean
  branchesLoaded: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type RemoveRailwayToken {
  status: String!
}

type Query {
  getRailwayTokens: [Token!]!
  railwayProjects: [Project!]!
  fetchUserGithubRepositories: [UserRepository!]!
  fetchUserGithubRepositoryBranches(repoId: String!, tokenId: String): [String!]!
  me: User!
}

type Mutation {
  connectRailwayAccount(payload: ConnectRailwayAccountDTO!): User!
  removeRailwayToken(id: String!): RemoveRailwayToken!
  authorize(payload: AuthorizeDTO!): User!
  createNewRailwayProject(payload: CreateNewRailwayProjectDTO!): Project!
}

input ConnectRailwayAccountDTO {
  name: String
  token: String!
  isDefault: Boolean
}

input AuthorizeDTO {
  uid: String!
  fullName: String
}

input CreateNewRailwayProjectDTO {
  tokenId: String
  prDeploys: Boolean
  isPublic: Boolean
  defaultEnvironmentName: String = "production"
  repo: Repo
}

input Repo {
  fullRepoName: String!
  branch: String!
}